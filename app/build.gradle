apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    def versionMajor = 0
    def versionMinor = 2
    def versionPatch = 0


    signingConfigs {
        config {
            storeFile file("${keystore_path}")
            def props = new Properties()
            props.load(new FileInputStream("${keystore_config_path}"))
            storePassword props.keyStorePassword
            keyAlias props.keyAlias
            keyPassword props.keyAliasPassword
        }
    }


    defaultConfig {
        applicationId "ir.oveissi.MovieSearcher"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile rootProject.ext.libraries.junit
    compile rootProject.ext.libraries.appCompat
    compile rootProject.ext.libraries.recyclerView
    compile rootProject.ext.libraries.cardView
    compile rootProject.ext.libraries.androidSupport4
    compile rootProject.ext.libraries.designSupport

    compile rootProject.ext.libraries.rxjava
    compile rootProject.ext.libraries.rxandroid

    compile rootProject.ext.libraries.butterknife
    apt rootProject.ext.libraries.butterknifeCompiler

    compile rootProject.ext.libraries.retrofit
    compile rootProject.ext.libraries.retrofitConverter
    compile rootProject.ext.libraries.retrofitAdapter
    compile rootProject.ext.libraries.okhttpLogging
    compile rootProject.ext.libraries.okhttp3

    compile rootProject.ext.libraries.picasso

    compile rootProject.ext.libraries.dagger
    provided rootProject.ext.libraries.daggerCompiler
}

android.applicationVariants.all { variant ->
    def appName
    if (project.hasProperty("applicationName")) {
        appName = "${applicationName}"
    } else {
        appName = parent.name
    }
    variant.outputs.each { output ->
        def newApkName
        newApkName = "${appName}-${output.baseName}-${variant.versionName}.apk"
        output.outputFile = new File(output.outputFile.parent, newApkName)
    }
}