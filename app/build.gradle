apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    def versionMajor = 0
    def versionMinor = 2
    def versionPatch = 0


    defaultConfig {
        applicationId "ir.oveissi.searchmovies"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile rootProject.ext.libraries.junit
    compile rootProject.ext.libraries.appCompat
    compile rootProject.ext.libraries.recyclerView
    compile rootProject.ext.libraries.cardView
    compile rootProject.ext.libraries.androidSupport4
    compile rootProject.ext.libraries.designSupport

    compile rootProject.ext.libraries.rxjava
    compile rootProject.ext.libraries.rxandroid

    compile rootProject.ext.libraries.butterknife
    apt rootProject.ext.libraries.butterknifeCompiler

    compile rootProject.ext.libraries.retrofit
    compile rootProject.ext.libraries.retrofitConverter
    compile rootProject.ext.libraries.retrofitAdapter
    compile rootProject.ext.libraries.okhttpLogging
    compile rootProject.ext.libraries.okhttp3

    compile rootProject.ext.libraries.picasso

    compile rootProject.ext.libraries.dagger
    provided rootProject.ext.libraries.daggerCompiler

    compile rootProject.ext.libraries.materialProgress

}

android.applicationVariants.all { variant ->
    def appName
    if (project.hasProperty("applicationName")) {
        appName = "${applicationName}"
    } else {
        appName = parent.name
    }
    variant.outputs.each { output ->
        def newApkName
        newApkName = "${appName}-${output.baseName}-${variant.versionName}.apk"
        output.outputFile = new File(output.outputFile.parent, newApkName)
    }
}

// For app signing
if (["storeFile", "storePassword", "keyAlias", "keyPassword"].count { !project.hasProperty(it) } == 0) {
    android {
        signingConfigs {
            release {
                storeFile = file(project.storeFile)
                storePassword = project.storePassword
                keyAlias = project.keyAlias
                keyPassword = project.keyPassword
            }
        }
    }
    android.buildTypes.release.signingConfig = android.signingConfigs.release
}